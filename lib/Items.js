// Generated by CoffeeScript 1.6.3
(function() {
  var $, Dialog, Items, err,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dialog = require('modal-dialog');

  try {
    $ = require('$');
  } catch (_error) {
    err = _error;
    $ = window.jQuery;
  }

  Items = (function() {
    Items.prototype.types = null;

    Items.prototype.initialized = false;

    Items.prototype.dialog = null;

    Items.prototype.defaults = null;

    Items.prototype.select = null;

    Items.prototype.resultElement = null;

    Items.prototype.summaryElement = null;

    function Items() {
      this.onSelectChange = __bind(this.onSelectChange, this);
      this.types = {};
      this.defaults = {};
    }

    Items.prototype.prepare = function() {
      var header, item, items, name, _i, _len, _ref,
        _this = this;
      header = $('<div>', {
        html: $('<span>Items</span>')
      });
      this.select = $('<select>', {
        html: $('<option value="">Add new type</option>'),
        change: this.onSelectChange
      });
      for (name in this.types) {
        this.addTypeToSelection(name);
      }
      this.select.appendTo(header);
      this.dialog = new Dialog;
      this.dialog.header = header;
      this.dialog.content = $('<div class="container"></div>');
      this.dialog.addButton('OK', function() {
        return _this.dialog.hide();
      });
      _ref = this.defaults;
      for (name in _ref) {
        items = _ref[name];
        if (items.length > 0) {
          this.addType(name);
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            item = items[_i];
            this.addValue(name, item);
          }
        }
      }
      return this.initialized = true;
    };

    Items.prototype.open = function() {
      if (!this.initialized) {
        this.prepare();
      }
      return this.dialog.show();
    };

    Items.prototype.close = function() {
      return this.dialog.hide();
    };

    Items.prototype.addTypeToSelection = function(name) {
      return $('<option>', {
        value: name,
        html: this.types[name]
      }).appendTo(this.select);
    };

    Items.prototype.onSelectChange = function() {
      var selected;
      selected = this.select.find(':selected');
      return this.addType(selected.attr('value'));
    };

    Items.prototype.addType = function(name) {
      var box, title,
        _this = this;
      title = $('<h3>', {
        html: this.types[name] + ' '
      });
      $('<a>', {
        href: '#',
        html: 'Add',
        click: function(e) {
          var value;
          e.preventDefault();
          name = $(e.target).closest('div.type').attr('data-name');
          value = prompt('Please enter new item for ' + _this.types[name]);
          if (value !== '' && value !== null) {
            return _this.addValue(name, value);
          }
        }
      }).appendTo(title);
      title.append(' ');
      $('<a>', {
        href: '#',
        html: 'Remove',
        click: function(e) {
          e.preventDefault();
          return _this.removeType($(e.target).closest('div.type').attr('data-name'));
        }
      }).appendTo(title);
      box = $('<div>', {
        'class': 'type',
        html: title,
        'data-name': name
      });
      $('<ul></ul>').appendTo(box);
      box.appendTo(this.dialog.content);
      this.select.find('option[value=""]').prop('selected', true);
      this.select.find('option[value="' + name + '"]').remove();
      this.refreshOutputs();
      if (this.select.find('option').length === 1) {
        return this.select.hide();
      }
    };

    Items.prototype.removeType = function(name) {
      this.dialog.content.find('div.type[data-name="' + name + '"]').remove();
      this.addTypeToSelection(name);
      if (this.select.is(':hidden')) {
        this.select.show();
      }
      return this.refreshOutputs();
    };

    Items.prototype.addValue = function(type, value) {
      var item, list,
        _this = this;
      list = this.dialog.content.find('div.type[data-name="' + type + '"] ul');
      item = $('<li>', {
        html: $('<span>' + value + '</span>')
      });
      item.append(' ');
      $('<a>', {
        href: '#',
        html: 'Remove',
        click: function(e) {
          e.preventDefault();
          item.remove();
          return _this.refreshOutputs();
        }
      }).appendTo(item);
      item.append(' ');
      $('<a>', {
        href: '#',
        html: 'Edit',
        click: function(e) {
          e.preventDefault();
          value = prompt('Please enter new item for ' + _this.types[type], value);
          if (value !== '' && value !== null) {
            item.find('span').html(value);
            return _this.refreshOutputs();
          }
        }
      }).appendTo(item);
      item.appendTo(list);
      return this.refreshOutputs();
    };

    Items.prototype.getValues = function() {
      var result;
      result = {};
      this.dialog.content.find('div.type[data-name]').each(function(i, el) {
        var name;
        el = $(el);
        name = el.attr('data-name');
        if (el.find('ul li').length > 0) {
          result[name] = [];
          return el.find('ul li').each(function(i, li) {
            li = $(li);
            return result[name].push(li.find('span').html());
          });
        }
      });
      return result;
    };

    Items.prototype.setResultElement = function(el) {
      el = $(el);
      if (el.get(0).nodeName.toLowerCase() !== 'input' || el.attr('type') !== 'text') {
        throw new Error('Resule: invalid element');
      }
      return this.resultElement = el;
    };

    Items.prototype.setSummaryElement = function(el) {
      el = $(el);
      if (el.get(0).nodeName.toLowerCase() !== 'div') {
        throw new Error('Summary: invalid element');
      }
      el.append($('<ul>'));
      return this.summaryElement = el;
    };

    Items.prototype.refreshOutputs = function() {
      var item, items, name, type, ul, values, _i, _len, _results;
      values = this.getValues();
      if (this.resultElement !== null) {
        this.resultElement.val(JSON.stringify(values));
      }
      if (this.summaryElement !== null) {
        this.summaryElement.find('ul').html('');
        _results = [];
        for (name in values) {
          items = values[name];
          type = $('<li>', {
            html: this.types[name]
          });
          if (items.length > 0) {
            ul = $('<ul>');
            for (_i = 0, _len = items.length; _i < _len; _i++) {
              item = items[_i];
              $('<li>' + item + '</li>').appendTo(ul);
            }
            ul.appendTo(type);
          }
          _results.push(type.appendTo(this.summaryElement.find('ul')));
        }
        return _results;
      }
    };

    return Items;

  })();

  module.exports = Items;

}).call(this);
